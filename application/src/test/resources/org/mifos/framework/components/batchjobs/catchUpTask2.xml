<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:batch="http://www.springframework.org/schema/batch"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                        http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-2.1.xsd">

    <!--
        ========= Import declarations: =========
    -->

    <bean id="integrationDataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${integration.database.driver}" />
        <property name="url"
            value="jdbc:mysql://${integration.database.host}:${integration.database.port}/${integration.database}?${integration.database.params.spring}" />
        <property name="username" value="${integration.database.user}" />
        <property name="password" value="${integration.database.password}" />
    </bean>

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="integrationDataSource" />
    </bean>

    <!--
        ========= Batch jobs configurations: =========
    -->

    <!--
                ProductStatusTask:
    -->
    <bean name="ProductStatus" parent="jobDetailBase" class="org.springframework.scheduling.quartz.JobDetailBean">
      <property name="jobClass" value="org.mifos.framework.components.batchjobs.helpers.ProductStatus" />
      <property name="name" value="ProductStatusJob" />
    </bean>
    <bean id="ProductStatusTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="ProductStatus" />
        <property name="cronExpression" value="0 0 0 * * ?" />
    </bean>
    <batch:job id="ProductStatusJob" parent="jobBase" job-repository="jobRepository">
        <batch:step id="ProductStatus-step-1">
            <batch:tasklet ref="ProductStatusTasklet" />
        </batch:step>
    </batch:job>
    <bean name="ProductStatusTasklet" class="org.mifos.framework.components.batchjobs.helpers.FailCatchUpMockHelper" />

    <bean id="schedulerFactoryBean" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="quartzProperties">
            <props>
                <prop key="org.quartz.scheduler.instanceName">MifosQuartzScheduler</prop>
                <prop key="org.quartz.scheduler.instanceId">AUTO</prop>
                <prop key="org.quartz.scheduler.skipUpdateCheck">true</prop>
                <prop key="org.quartz.threadPool.class">org.quartz.simpl.SimpleThreadPool</prop>
                <prop key="org.quartz.threadPool.threadCount">1</prop>
                <prop key="org.quartz.jobStore.class">org.quartz.simpl.RAMJobStore</prop>
                <prop key="org.quartz.jobStore.misfireThreshold">60000</prop>
            </props>
        </property>
        <property name="triggers">
            <list>
                <ref bean="ProductStatusTrigger" />
            </list>
        </property>
    </bean>

    <!--
        ========= Framework-specific configurations: =========
    -->

    <bean id="configurationLocator" class="org.mifos.framework.util.ConfigurationLocator"/>

    <bean id="defaultProperties" factory-bean="configurationLocator" factory-method="getSpringFilePath">
        <constructor-arg value="mainDatabase.properties"/>
    </bean>

    <bean id="integrationProperties" factory-bean="configurationLocator" factory-method="getSpringFilePath">
        <constructor-arg value="integrationDatabase.properties"/>
    </bean>

    <bean id="customProperties" factory-bean="configurationLocator" factory-method="getSpringFilePath">
        <constructor-arg value="local.properties"/>
    </bean>

    <bean id="mainPropertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"/>
        <property name="ignoreResourceNotFound" value="false"/>
        <property name="locations">
            <list>
                <ref bean="defaultProperties"/>
                <ref bean="integrationProperties"/>
                <ref bean="customProperties"/>
            </list>
        </property>
    </bean>

    <batch:job-repository
       id="jobRepository"
       transaction-manager="transactionManager"
       data-source="integrationDataSource"
       table-prefix="BATCH_"
    />

    <bean id="jobLauncher" class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
       <property name="jobRepository" ref="jobRepository" />
       <property name="taskExecutor">
           <bean class="org.springframework.core.task.SyncTaskExecutor" />
       </property>
    </bean>

    <bean id="jobRegistry" class="org.springframework.batch.core.configuration.support.MapJobRegistry" />

    <bean id="jobExplorer" class="org.springframework.batch.core.explore.support.JobExplorerFactoryBean">
       <property name="dataSource" ref="integrationDataSource" />
       <property name="tablePrefix" value="BATCH_" />
    </bean>

    <bean id="jobRegistryBeanPostProcessor" class="org.springframework.batch.core.configuration.support.JobRegistryBeanPostProcessor">
        <property name="jobRegistry" ref="jobRegistry"/>
    </bean>

    <bean id="jobDetailBase" class="org.springframework.scheduling.quartz.JobDetailBean">
       <property name="jobDataAsMap">
        <map>
            <entry key="jobLocator" value-ref="jobRegistry" />
            <entry key="jobLauncher" value-ref="jobLauncher" />
            <entry key="jobExplorer" value-ref="jobExplorer" />
            <entry key="jobRepository" value-ref="jobRepository" />
        </map>
    </property>

    </bean>

    <batch:job id="jobBase" abstract="true">
        <batch:listeners>
            <batch:listener ref="jobListener"/>
        </batch:listeners>
    </batch:job>

    <bean id="jobListener" class="org.mifos.framework.components.batchjobs.BatchJobListener" />

</beans>
