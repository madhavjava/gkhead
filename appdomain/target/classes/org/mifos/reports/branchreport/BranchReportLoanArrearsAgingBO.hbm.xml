<?xml version="1.0" encoding='UTF-8'?>
<!DOCTYPE hibernate-mapping PUBLIC
                            "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
                            "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd" >
<!--
Copyright (c) 2005-2011 Grameen Foundation USA
1029 Vermont Avenue, NW, Suite 400, Washington DC 20005
All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
implied. See the License for the specific language governing
permissions and limitations under the License.

See also http://www.apache.org/licenses/LICENSE-2.0.html for an
explanation of the license and how it is applied.
-->
<hibernate-mapping>
    <class
        name="org.mifos.reports.branchreport.BranchReportLoanArrearsAgingBO"
        table="batch_loan_arrears_aging">
        <id name="arrearsAgingId" column="loan_arrears_aging_id"
            type="integer" access="field">
            <generator class="native" />
        </id>
        <property name="agingPeriod" column="aging_period_id"
            type="org.mifos.reports.branchreport.LoanArrearsAgingPeriodType"
            access="field" />
        <property name="clientsAging" column="clients_aging"
            type="integer" access="field" />
        <property name="loansAging" column="loans_aging" type="integer"
            access="field" />
        <property name="amountAging" type="org.mifos.framework.util.helpers.MoneyCompositeUserType" access="field">
            <column name="amount_aging_currency_id"/>
            <column name="amount_aging"/>
        </property>
        <property name="amountOutstandingAging" type="org.mifos.framework.util.helpers.MoneyCompositeUserType" access="field">
            <column name="amount_outstanding_aging_currency_id"/>
            <column name="amount_outstanding_aging"/>
        </property>
        <property name="interestAging" type="org.mifos.framework.util.helpers.MoneyCompositeUserType" access="field">
            <column name="interest_aging_currency_id"/>
            <column name="interest_aging"/>
        </property>
        <many-to-one name="branchReport" column="branch_report_id" access="field"
            class="org.mifos.reports.branchreport.BranchReportBO">
        </many-to-one>
    </class>

    <sql-query
        name="branchReport.getBranchReportLoanArrearsAgingForDateAndBranch">
        <load-collection alias="loanArrears"
            role="org.mifos.reports.branchreport.BranchReportBO.loanArrearsAging" />
        <![CDATA[SELECT {loanArrears.*} from batch_loan_arrears_aging as loanArrears, batch_branch_report as branchReport where
            branchReport.branch_report_id=loanArrears.branch_report_id
            and branchReport.run_date=:RUN_DATE
            and branchReport.branch_id=:BRANCH_ID
            order by loanArrears.aging_period_id
        ]]>
    </sql-query>
    <sql-query name="branchReport.extractBranchReportLoanArrears">
        <return-scalar column="clientsAgingCount" type="integer"/>
        <return-scalar column="loansAgingCount" type="integer"/>
        <return-scalar column="amountAgingCount" type="big_decimal"/>
        <return-scalar column="amountOutstandingAgingCount" type="big_decimal"/>
        <return-scalar column="interestAgingCount" type="big_decimal"/>
        <![CDATA[
            select (
                    select count(distinct laa.customer_id)
                        from
                            loan_arrears_aging laa
                        left join
                            customer cust on cust.customer_id=laa.customer_id
                        left join
                            customer_state cs on cs.status_id=cust.status_id
                        left join
                            account acc on acc.account_id=laa.account_id
                        where
                            cust.customer_level_id=:customerLevelId
                        and
                            acc.account_state_id in (9)
                        and
                            (cs.description='Customer Was Active' or cs.description='Customer Was Hold')
                        and
                            laa.days_in_arrears >=:MIN_DAYS
                        and
                            laa.days_in_arrears <=:MAX_DAYS
                        and
                            laa.customer_id
                            not in (select
                                        distinct laa1.customer_id
                                    from
                                        loan_arrears_aging laa1
                                    where
                                        laa1.days_in_arrears >= :NOT_LESS_THAN_DAYS
                                    and
                                        laa1.office_id=:officeId
                                    )
                        and
                           laa.office_id=:officeId
                    ) as clientsAgingCount,
                count(*) as loansAgingCount,
                round(ifnull(sum(coalesce(la.overdue_principal)),0),3) as amountAgingCount,
                round(ifnull(sum(coalesce(la.unpaid_principal)),0),3) as amountOutstandingAgingCount,
                round(ifnull(sum(coalesce(la.overdue_interest)),0),3) as interestAgingCount
            from
                loan_arrears_aging la
            left join
                customer cust on cust.customer_id=la.customer_id
            left join
                customer_state cs on cs.status_id=cust.status_id
            left join
                account acc on acc.account_id=la.account_id
            where
                cust.customer_level_id=:customerLevelId
            and
                (cs.description='Customer Was Active' or cs.description='Customer Was Hold')
            and
                acc.account_state_id in (9)
            and
                la.days_in_arrears >=:MIN_DAYS
            and
                la.days_in_arrears <=:MAX_DAYS
            and
                la.office_id=:officeId
    ]]>
    </sql-query>

</hibernate-mapping>
