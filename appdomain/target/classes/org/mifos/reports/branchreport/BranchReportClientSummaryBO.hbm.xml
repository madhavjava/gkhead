<?xml version="1.0" encoding='UTF-8'?>
<!DOCTYPE hibernate-mapping PUBLIC
                            "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
                            "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd" >
<!--
Copyright (c) 2005-2011 Grameen Foundation USA
1029 Vermont Avenue, NW, Suite 400, Washington DC 20005
All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
implied. See the License for the specific language governing
permissions and limitations under the License.

See also http://www.apache.org/licenses/LICENSE-2.0.html for an
explanation of the license and how it is applied.
-->
<hibernate-mapping>
    <class
        name="org.mifos.reports.branchreport.BranchReportClientSummaryBO"
        table="batch_client_summary">
        <id name="clientSummaryId" column="client_summary_id"
            type="integer" access="field">
            <generator class="native" />
        </id>

        <property name="fieldName" column="field_name" type="string"
            access="field" />
        <property name="total" column="total" type="string"
            access="field" />
        <property name="veryPoorTotal" column="vpoor_total"
            type="string" access="field" />

        <many-to-one name="branchReport" column="branch_report_id" access="field"
            class="org.mifos.reports.branchreport.BranchReportBO">
        </many-to-one>
    </class>

    <sql-query
        name="branchReport.getBranchReportClientSummaryForDateAndBranch">
        <load-collection alias="clientSummaries"
            role="org.mifos.reports.branchreport.BranchReportBO.clientSummaries" />
        <![CDATA[ SELECT {clientSummaries.*} from batch_client_summary as clientSummaries,
            batch_branch_report as branchReport where
            branchReport.branch_report_id=clientSummaries.branch_report_id
            and branchReport.run_date=:RUN_DATE
            and branchReport.branch_id=:BRANCH_ID
        ]]>
    </sql-query>

    <sql-query name="branchReport.extractPortfolioAtRiskForBranch">
        <return-scalar column="portfolioAtRisk" type="big_decimal"/>
        <![CDATA[
                select
                    round(laa1.outstanding_principal/ls1.balance_principal*100.0,3) as portfolioAtRisk
                from
                    (
                        select ifnull(sum(laa.unpaid_principal),0) as outstanding_principal
                            from
                                loan_arrears_aging laa
                            left join
                                account acc on acc.account_id=laa.account_id
                            left join
                                customer cust on cust.customer_id=acc.customer_id
                            left join
                                customer_state cs on cs.status_id=cust.status_id
                            where
                                acc.account_state_id in (:loanActiveInBadStanding)
                            and
                                (cs.description='Customer Was Active' or cs.description='Customer Was Hold')
                            and
                                cust.customer_level_id=:customerLevelId
                            and
                                laa.days_in_arrears>=:daysInArrears
                               and
                                   acc.office_id=:officeId
                     ) laa1,
                     (
                        select ifnull(sum(ls.orig_principal-ls.principal_paid),1) as balance_principal
                            from
                                loan_summary ls
                            left join
                                account acc on acc.account_id=ls.account_id
                            left join
                                customer cust on cust.customer_id=acc.customer_id
                            left join
                                customer_state cs on cs.status_id=cust.status_id
                            where
                                acc.account_state_id in (:loanActiveInGoodStanding,:loanActiveInBadStanding)
                            and
                                (cs.description='Customer Was Active' or cs.description='Customer Was Hold')
                            and
                                cust.customer_level_id=:customerLevelId
                            and
                                acc.office_id=:officeId
                     ) ls1
        ]]>
    </sql-query>

</hibernate-mapping>
