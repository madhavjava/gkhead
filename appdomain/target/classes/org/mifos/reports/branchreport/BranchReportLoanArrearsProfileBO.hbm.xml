<?xml version="1.0" encoding='UTF-8'?>
<!DOCTYPE hibernate-mapping PUBLIC
                            "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
                            "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd" >
<!--
Copyright (c) 2005-2011 Grameen Foundation USA
1029 Vermont Avenue, NW, Suite 400, Washington DC 20005
All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
implied. See the License for the specific language governing
permissions and limitations under the License.

See also http://www.apache.org/licenses/LICENSE-2.0.html for an
explanation of the license and how it is applied.
-->
<hibernate-mapping>
    <class
        name="org.mifos.reports.branchreport.BranchReportLoanArrearsProfileBO"
        table="batch_loan_arrears_profile">
        <id name="loanArrearsProfileId" column="loan_arrears_profile_id" type="integer"
            access="field">
            <generator class="native" />
        </id>
        <property name="loansInArrears"
            column="loans_in_arrears" type="integer" access="field" />
        <property name="clientsInArrears"
            column="clients_in_arrears" type="integer" access="field" />
        <property name="overDueBalance" type="org.mifos.framework.util.helpers.MoneyCompositeUserType" access="field">
            <column name="overdue_balance_currency_id"/>
            <column name="overdue_balance"/>
        </property>
        <property name="unpaidBalance" type="org.mifos.framework.util.helpers.MoneyCompositeUserType" access="field">
            <column name="unpaid_balance_currency_id"/>
            <column name="unpaid_balance"/>
        </property>
        <property name="loansAtRisk"
            column="loans_at_risk" type="integer" access="field" />
        <property name="outstandingAmountAtRisk" type="org.mifos.framework.util.helpers.MoneyCompositeUserType" access="field">
            <column name="outstanding_amount_at_risk_currency_id"/>
            <column name="outstanding_amount_at_risk"/>
        </property>
        <property name="overdueAmountAtRisk" type="org.mifos.framework.util.helpers.MoneyCompositeUserType" access="field">
            <column name="overdue_amount_at_risk_currency_id"/>
            <column name="overdue_amount_at_risk"/>
        </property>
        <property name="clientsAtRisk"
            column="clients_at_risk" type="integer" access="field" />
        <many-to-one name="branchReport" column="branch_report_id"
            access="field"
            class="org.mifos.reports.branchreport.BranchReportBO">
        </many-to-one>
    </class>

    <sql-query
        name="branchReport.getBranchReportLoanArrearsProfileForDateAndBranch">
        <load-collection alias="loanArrearsProfile"
            role="org.mifos.reports.branchreport.BranchReportBO.loanArrearsProfile" />
        <![CDATA[SELECT {loanArrearsProfile.*} from batch_loan_arrears_profile as loanArrearsProfile,
             batch_branch_report as branchReport where
            branchReport.branch_report_id=loanArrearsProfile.branch_report_id
            and branchReport.run_date=:RUN_DATE
            and branchReport.branch_id=:BRANCH_ID
        ]]>
    </sql-query>

    <sql-query name="branchReport.extractLoansInArrearsForBranch">
        <return-scalar column="loansInArrears" type="integer" />
        <return-scalar column="clientsInArrears" type="integer" />
        <return-scalar column="overDueBalance" type="big_decimal" />
        <return-scalar column="unpaidBalance" type="big_decimal" />
        <![CDATA[
            SELECT count(*) as loansInArrears,
                    count(distinct la.customer_id) as clientsInArrears,
                    round(ifnull(sum(coalesce(overdue_principal,0)),0),3) as overDueBalance,
                    round(ifnull(sum(coalesce(unpaid_principal,0)),0),3) as unpaidBalance
                    from
                        loan_arrears_aging la
                    left join
                        account acc on acc.account_id=la.account_id
                    left join
                        customer cust on cust.customer_id=la.customer_id
                    left join
                        customer_state cs on cs.status_id=cust.status_id
                    where
                        la.office_id=:officeId
                        and acc.account_state_id in (9)
                        and cust.customer_level_id = 1
                        and (cs.description='Customer Was Active' or cs.description='Customer Was Hold')
        ]]>
    </sql-query>

    <sql-query name="branchReport.extractLoansAndOutstandingAmountsAtRiskForBranch">
        <return-scalar column="loansAtRisk" type="integer" />
        <return-scalar column="outstandingAmountAtRisk" type="big_decimal" />
        <return-scalar column="overdueAmountAtRisk" type="big_decimal" />
        <![CDATA[SELECT
                    count(*) as loansAtRisk,
                    round(ifnull(sum(coalesce(unpaid_principal)),0),3) as outstandingAmountAtRisk,
                    round(ifnull(sum(coalesce(overdue_principal)),0),3) as overdueAmountAtRisk
                from
                    loan_arrears_aging laa
                left join
                    account acc on acc.account_id=laa.account_id
                left join
                    customer cust on cust.customer_id=laa.customer_id
                left join
                    customer_state cs on cs.status_id=cust.status_id
                where cust.customer_level_id= :customerLevelId
                and laa.office_id = :officeId
                and days_in_arrears >= :daysInArrears
                and acc.account_state_id in (9)
                and (cs.description='Customer Was Active' or cs.description='Customer Was Hold')
        ]]>
    </sql-query>

    <sql-query name="branchReport.extractLoanArrearsProfileClientsAtRiskForBranch">
        <return-scalar column="clientsAtRisk" type="integer" />
        <![CDATA[
            SELECT count(distinct laa.customer_id) as clientsAtRisk
                from loan_arrears_aging laa, customer c, customer_state cs, account acc
                where laa.customer_id=c.customer_id
                and cs.status_id=c.status_id
                and acc.account_id=laa.account_id
                and c.customer_level_id=:customerLevelId
                and c.branch_id = :officeId
                and days_in_arrears >= :daysInArrears
                and acc.account_state_id in (9)
                and (cs.description='Customer Was Active' or cs.description='Customer Was Hold')
        ]]>
    </sql-query>
</hibernate-mapping>
